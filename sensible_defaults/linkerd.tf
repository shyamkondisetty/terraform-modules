## TODO
## The private key generated by this resource will be stored unencrypted in your Terraform state file
## Use of this resource for production deployments is not recommended. 
## Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run
## https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key
resource "tls_private_key" "linkerd_trust_anchor" {
  algorithm   = "ECDSA"
  ecdsa_curve = "P256"
}

resource "tls_self_signed_cert" "linkerd_trust_anchor" {

  key_algorithm   = tls_private_key.linkerd_trust_anchor.algorithm
  private_key_pem = tls_private_key.linkerd_trust_anchor.private_key_pem
  is_ca_certificate  = true
  allowed_uses = [
    "cert_signing",
    "crl_signing",
    "server_auth",
    "client_auth",
  ]

  subject {
    common_name  = var.linkerd_common_name
    organization = var.linkerd_organization
  }
  validity_period_hours = var.linkerd_validity_hours
}

## TODO
## The private key generated by this resource will be stored unencrypted in your Terraform state file
## Use of this resource for production deployments is not recommended. 
## Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run
## https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key
resource "tls_private_key" "linkerd_issuer" {  
  algorithm   = "ECDSA"
  ecdsa_curve = "P256"
}

resource "tls_cert_request" "linkerd_issuer" {  
  key_algorithm   = tls_private_key.linkerd_issuer.algorithm
  private_key_pem = tls_private_key.linkerd_issuer.private_key_pem

  subject {
    common_name  = var.linkerd_common_name
    organization = var.linkerd_organization
  }
}

resource "tls_locally_signed_cert" "linkerd_issuer" {  
  cert_request_pem      = tls_cert_request.linkerd_issuer.cert_request_pem
  ca_key_algorithm      = tls_private_key.linkerd_trust_anchor.algorithm
  ca_private_key_pem    = tls_private_key.linkerd_trust_anchor.private_key_pem
  ca_cert_pem           = tls_self_signed_cert.linkerd_trust_anchor.cert_pem
  validity_period_hours = var.linkerd_validity_hours
  is_ca_certificate     = true

  allowed_uses = [
    "crl_signing",
    "cert_signing",
    "server_auth",
    "client_auth"
  ]
}

resource "helm_release" "linkerd" {
  name       = "linkerd"
  repository = "https://helm.linkerd.io/stable"
  chart      = "linkerd2"

  set_sensitive {
    name  = "global.identityTrustAnchorsPEM"
    value = tls_self_signed_cert.linkerd_trust_anchor.cert_pem
  }

  set_sensitive {
    name  = "identity.issuer.tls.crtPEM"
    value = tls_locally_signed_cert.linkerd_issuer.cert_pem
  }

  set_sensitive {
    name  = "identity.issuer.tls.keyPEM"
    value = tls_private_key.linkerd_issuer.private_key_pem
  }

  set {
    name  = "identity.issuer.crtExpiry"
    value = tls_locally_signed_cert.linkerd_issuer.validity_end_time
  }

  set {
    name  = "tracing.enabled"
    value = true
  }
}
